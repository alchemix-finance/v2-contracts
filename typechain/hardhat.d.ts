/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "YearnTokenAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnTokenAdapter__factory>;
    getContractFactory(
      name: "AlchemicTokenV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemicTokenV1__factory>;
    getContractFactory(
      name: "AlchemicTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemicTokenV2__factory>;
    getContractFactory(
      name: "AlchemicTokenV2Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemicTokenV2Base__factory>;
    getContractFactory(
      name: "AlchemistV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemistV2__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "Mutex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mutex__factory>;
    getContractFactory(
      name: "SelfPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfPermit__factory>;
    getContractFactory(
      name: "CDelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegateInterface__factory>;
    getContractFactory(
      name: "CDelegationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegationStorage__factory>;
    getContractFactory(
      name: "CDelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegatorInterface__factory>;
    getContractFactory(
      name: "CErc20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Interface__factory>;
    getContractFactory(
      name: "CErc20Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Storage__factory>;
    getContractFactory(
      name: "CErc721Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc721Interface__factory>;
    getContractFactory(
      name: "CErc721MigrationInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc721MigrationInterface__factory>;
    getContractFactory(
      name: "CErc721MigrationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc721MigrationStorage__factory>;
    getContractFactory(
      name: "CErc721Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc721Storage__factory>;
    getContractFactory(
      name: "CTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenInterface__factory>;
    getContractFactory(
      name: "CTokenStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenStorage__factory>;
    getContractFactory(
      name: "ComptrollerG3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerG3Interface__factory>;
    getContractFactory(
      name: "ComptrollerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerInterface__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "CrossChainCanonicalAlchemicTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainCanonicalAlchemicTokenV2__factory>;
    getContractFactory(
      name: "CrossChainCanonicalBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainCanonicalBase__factory>;
    getContractFactory(
      name: "GALCX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GALCX__factory>;
    getContractFactory(
      name: "IAlchemistV2Actions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2Actions__factory>;
    getContractFactory(
      name: "IAlchemistV2AdminActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2AdminActions__factory>;
    getContractFactory(
      name: "IAlchemistV2Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2Errors__factory>;
    getContractFactory(
      name: "IAlchemistV2Events",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2Events__factory>;
    getContractFactory(
      name: "IAlchemistV2Immutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2Immutables__factory>;
    getContractFactory(
      name: "IAlchemistV2State",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2State__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IStaticAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaticAToken__factory>;
    getContractFactory(
      name: "IWETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETHGateway__factory>;
    getContractFactory(
      name: "IProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyAdmin__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "DaiJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaiJoinLike__factory>;
    getContractFactory(
      name: "EndLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EndLike__factory>;
    getContractFactory(
      name: "GemJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemJoinLike__factory>;
    getContractFactory(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemLike__factory>;
    getContractFactory(
      name: "GNTJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNTJoinLike__factory>;
    getContractFactory(
      name: "HopeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HopeLike__factory>;
    getContractFactory(
      name: "IDssProxyActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDssProxyActions__factory>;
    getContractFactory(
      name: "JugLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JugLike__factory>;
    getContractFactory(
      name: "ManagerLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerLike__factory>;
    getContractFactory(
      name: "PotLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotLike__factory>;
    getContractFactory(
      name: "ProxyLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyLike__factory>;
    getContractFactory(
      name: "ProxyRegistryLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyRegistryLike__factory>;
    getContractFactory(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VatLike__factory>;
    getContractFactory(
      name: "ITetherToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITetherToken__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IYearnVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYearnVaultV2__factory>;
    getContractFactory(
      name: "IAlchemicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemicToken__factory>;
    getContractFactory(
      name: "IAlchemistV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemistV2__factory>;
    getContractFactory(
      name: "IALCXSource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IALCXSource__factory>;
    getContractFactory(
      name: "IERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Mintable__factory>;
    getContractFactory(
      name: "IERC20PermitAllowed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitAllowed__factory>;
    getContractFactory(
      name: "IERC20TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20TokenReceiver__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticall__factory>;
    getContractFactory(
      name: "ISelfPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISelfPermit__factory>;
    getContractFactory(
      name: "IStakingPools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingPools__factory>;
    getContractFactory(
      name: "ITokenAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenAdapter__factory>;
    getContractFactory(
      name: "IWETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETHGateway__factory>;
    getContractFactory(
      name: "IWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhitelist__factory>;
    getContractFactory(
      name: "ITestYieldToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestYieldToken__factory>;
    getContractFactory(
      name: "ITransmuterBuffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransmuterBuffer__factory>;
    getContractFactory(
      name: "ITransmuterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransmuterV2__factory>;
    getContractFactory(
      name: "FixedPointMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPointMath__factory>;
    getContractFactory(
      name: "Limiters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Limiters__factory>;
    getContractFactory(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenUtils__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "TestAlchemicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAlchemicToken__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestErc20Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestErc20Receiver__factory>;
    getContractFactory(
      name: "TestFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFlashBorrower__factory>;
    getContractFactory(
      name: "TestSets",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSets__factory>;
    getContractFactory(
      name: "TestTransmuter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTransmuter__factory>;
    getContractFactory(
      name: "TestWhitelisted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWhitelisted__factory>;
    getContractFactory(
      name: "TestWhitelistedCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWhitelistedCaller__factory>;
    getContractFactory(
      name: "TestYieldToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestYieldToken__factory>;
    getContractFactory(
      name: "TestYieldTokenAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestYieldTokenAdapter__factory>;
    getContractFactory(
      name: "TransmuterBufferMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransmuterBufferMock__factory>;
    getContractFactory(
      name: "TransmuterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransmuterMock__factory>;
    getContractFactory(
      name: "YearnVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnVaultMock__factory>;
    getContractFactory(
      name: "TransmuterBuffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransmuterBuffer__factory>;
    getContractFactory(
      name: "TransmuterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransmuterV2__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "WETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHGateway__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "YearnTokenAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnTokenAdapter>;
    getContractAt(
      name: "AlchemicTokenV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlchemicTokenV1>;
    getContractAt(
      name: "AlchemicTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlchemicTokenV2>;
    getContractAt(
      name: "AlchemicTokenV2Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlchemicTokenV2Base>;
    getContractAt(
      name: "AlchemistV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlchemistV2>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "Mutex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mutex>;
    getContractAt(
      name: "SelfPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfPermit>;
    getContractAt(
      name: "CDelegateInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegateInterface>;
    getContractAt(
      name: "CDelegationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegationStorage>;
    getContractAt(
      name: "CDelegatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegatorInterface>;
    getContractAt(
      name: "CErc20Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Interface>;
    getContractAt(
      name: "CErc20Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Storage>;
    getContractAt(
      name: "CErc721Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc721Interface>;
    getContractAt(
      name: "CErc721MigrationInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc721MigrationInterface>;
    getContractAt(
      name: "CErc721MigrationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc721MigrationStorage>;
    getContractAt(
      name: "CErc721Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc721Storage>;
    getContractAt(
      name: "CTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenInterface>;
    getContractAt(
      name: "CTokenStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenStorage>;
    getContractAt(
      name: "ComptrollerG3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerG3Interface>;
    getContractAt(
      name: "ComptrollerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerInterface>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "CrossChainCanonicalAlchemicTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainCanonicalAlchemicTokenV2>;
    getContractAt(
      name: "CrossChainCanonicalBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainCanonicalBase>;
    getContractAt(
      name: "GALCX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GALCX>;
    getContractAt(
      name: "IAlchemistV2Actions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2Actions>;
    getContractAt(
      name: "IAlchemistV2AdminActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2AdminActions>;
    getContractAt(
      name: "IAlchemistV2Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2Errors>;
    getContractAt(
      name: "IAlchemistV2Events",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2Events>;
    getContractAt(
      name: "IAlchemistV2Immutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2Immutables>;
    getContractAt(
      name: "IAlchemistV2State",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2State>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "ILendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IStaticAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaticAToken>;
    getContractAt(
      name: "IWETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETHGateway>;
    getContractAt(
      name: "IProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyAdmin>;
    getContractAt(
      name: "IWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "DaiJoinLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaiJoinLike>;
    getContractAt(
      name: "EndLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EndLike>;
    getContractAt(
      name: "GemJoinLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GemJoinLike>;
    getContractAt(
      name: "GemLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GemLike>;
    getContractAt(
      name: "GNTJoinLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GNTJoinLike>;
    getContractAt(
      name: "HopeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HopeLike>;
    getContractAt(
      name: "IDssProxyActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDssProxyActions>;
    getContractAt(
      name: "JugLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JugLike>;
    getContractAt(
      name: "ManagerLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerLike>;
    getContractAt(
      name: "PotLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotLike>;
    getContractAt(
      name: "ProxyLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyLike>;
    getContractAt(
      name: "ProxyRegistryLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyRegistryLike>;
    getContractAt(
      name: "VatLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VatLike>;
    getContractAt(
      name: "ITetherToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITetherToken>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IYearnVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYearnVaultV2>;
    getContractAt(
      name: "IAlchemicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemicToken>;
    getContractAt(
      name: "IAlchemistV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlchemistV2>;
    getContractAt(
      name: "IALCXSource",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IALCXSource>;
    getContractAt(
      name: "IERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Minimal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "IERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Mintable>;
    getContractAt(
      name: "IERC20PermitAllowed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitAllowed>;
    getContractAt(
      name: "IERC20TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20TokenReceiver>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IMulticall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticall>;
    getContractAt(
      name: "ISelfPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISelfPermit>;
    getContractAt(
      name: "IStakingPools",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingPools>;
    getContractAt(
      name: "ITokenAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenAdapter>;
    getContractAt(
      name: "IWETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETHGateway>;
    getContractAt(
      name: "IWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhitelist>;
    getContractAt(
      name: "ITestYieldToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestYieldToken>;
    getContractAt(
      name: "ITransmuterBuffer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransmuterBuffer>;
    getContractAt(
      name: "ITransmuterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransmuterV2>;
    getContractAt(
      name: "FixedPointMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPointMath>;
    getContractAt(
      name: "Limiters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Limiters>;
    getContractAt(
      name: "TokenUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenUtils>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "TestAlchemicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAlchemicToken>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestErc20Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestErc20Receiver>;
    getContractAt(
      name: "TestFlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFlashBorrower>;
    getContractAt(
      name: "TestSets",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSets>;
    getContractAt(
      name: "TestTransmuter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTransmuter>;
    getContractAt(
      name: "TestWhitelisted",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWhitelisted>;
    getContractAt(
      name: "TestWhitelistedCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWhitelistedCaller>;
    getContractAt(
      name: "TestYieldToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestYieldToken>;
    getContractAt(
      name: "TestYieldTokenAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestYieldTokenAdapter>;
    getContractAt(
      name: "TransmuterBufferMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransmuterBufferMock>;
    getContractAt(
      name: "TransmuterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransmuterMock>;
    getContractAt(
      name: "YearnVaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnVaultMock>;
    getContractAt(
      name: "TransmuterBuffer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransmuterBuffer>;
    getContractAt(
      name: "TransmuterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransmuterV2>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;
    getContractAt(
      name: "WETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHGateway>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
